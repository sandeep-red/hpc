1.
#include<stdio.h>
#include<omp.h>

int main(){
int n =6,i,j,k,chunk=3;
int a[n][n], b[n][n], c[n][n];
#pragma omp parallel default(shared)
{


#pragma omp for schedule(static, chunk)
for(i=0;i<n;i++)
for(j=0;j<n;j++){
c[i][j] = 0;
a[i][j] = i;
b[i][j] = j;
}

#pragma omp for schedule(static, chunk)
for(i=0;i<n;i++){
printf("Thread %d doing row %d\n",omp_get_thread_num(),i);
for(j=0;j<n;j++)
for(k=0;k<n;k++)
c[i][j] += a[i][k]*b[k][j];
}
}

printf("mat A\n");
for(i=0;i<n;i++){
for(j=0;j<n;j++)
printf("%d  ",a[i][j]);
printf("\n");
}
printf("mat B\n");
for(i=0;i<n;i++){
for(j=0;j<n;j++)
printf("%d  ",b[i][j]);
printf("\n");
}

printf("mat C\n");
for(i=0;i<n;i++){
for(j=0;j<n;j++)
printf("%d  ",c[i][j]);
printf("\n");
}
return 0;

}
-----------------------------------
2. 
#include<omp.h>
#include<stdio.h>
int main()
{
        int i,n=5;
        int fac=1;
#pragma omp parallel for firstprivate(n) reduction(*:fac)
        for(i=1;i<=n;i++){
                fac=fac*i;
                printf("thread no:%d\n",omp_get_thread_num());
        }
        printf("fac(%d)=%d\n",n,fac);
}
------------------------------
3.
#include<omp.h>
#include<stdio.h>

int main(){
        int i;
        omp_set_num_threads(7);
#pragma omp parallel
        printf("Hello world i am thread%d\n",omp_get_thread_num());
        printf("No of threadsd%d\n",omp_get_num_threads());
        printf("No of processes%d\n",omp_get_num_procs());
        printf("Max%d\n",omp_get_max_threads());
        printf("Parallel? %d\n",omp_in_parallel());
        printf("Dynamic%d\n",omp_get_dynamic());
        printf("Nested%d\n",omp_get_nested());
}
-----------------------------------------
4.
#include<stdio.h>
#include<omp.h>

int main(){
int a[]={1,2,3,4,5,6,7,8,9,10},b[]={1,2,3,4,5,6,7,8,9,10},c[10],d[10];
int i;

#pragma omp parallel default(shared) private(i)

{

#pragma omp sections nowait
{

#pragma omp section
{
for(i=0;i<10;i++)
	c[i]=a[i]+b[i];

}

#pragma omp section
{

for(i=0;i<10;i++)
	d[i]=a[i]-b[i];
}
}



}

for(i=0;i<10;i++)
	printf("%d\t",c[i]);

printf("\n");


for(i=0;i<10;i++)
	printf("%d\t",d[i]); 

printf("\n");
return 0;
}
-------------------------------
Private thread
7.
#include<stdio.h>
#include<omp.h>
int a,b,tid,x;
#pragma omp threadprivate(a,x)

int main()
{

#pragma omp parallel default(shared) private(tid,b)
{
tid=omp_get_thread_num();
a=tid;
b=tid*10;
x=tid*100;
}

#pragma omp parallel default(shared) private(tid)
{
printf("thread:%d,a:%d,b:%d,x:%d\n",omp_get_thread_num(),a,b,x);
}

return 0;
}
-------------------------------
5.
#include <omp.h>
#include <stdio.h>
#include <stdlib.h>

int main (int argc, char *argv[])
{
        int i, n;
        float a[1000], b[1000], sum;

        /* Some initializations */
        n = 1000;
        for (i=0; i < n; i++)
                a[i] = b[i] = i * 1.0;
        sum = 0.0;

#pragma omp parallel for reduction(+:sum)
        for (i=0; i < n; i++)
                sum = sum + (a[i] * b[i]);

        printf(" Sum = %f\n",sum);

}
--------------------------------
8.
#include <omp.h>
#include <stdio.h>
#include <stdlib.h>
#define CHUNKSIZE 10
#define N 100
int main (int argc, char *argv[])
{
int nthreads, tid, i, chunk;
float a[N], b[N], c[N];

/* Some initializations */
for (i=0; i < N; i++)
a[i] = b[i] = i * 1.0;
chunk = CHUNKSIZE;

#pragma omp parallel shared(a,b,c,nthreads,chunk) private(i,tid)
{
tid = omp_get_thread_num();
if (tid == 0)
{
nthreads = omp_get_num_threads();
printf("Number of threads = %d\n", nthreads);
}
printf("Thread %d starting...\n",tid);

#pragma omp for schedule (dynamic, chunk)
for (i=0; i<N; i++)
{
c[i] = a[i] + b[i];
printf("Thread %d: c[%d]= %f\n",tid,i,c[i]);
}

} /* end of parallel section */

}






